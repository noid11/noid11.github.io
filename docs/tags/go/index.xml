<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on dumped logs</title>
    <link>https://noid11.github.io/tags/go/</link>
    <description>Recent content in Go on dumped logs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>&amp;#169; noid11</copyright>
    <lastBuildDate>Tue, 26 Jan 2021 02:40:20 +0900</lastBuildDate><atom:link href="https://noid11.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go で作成した Web アプリを EB CLI を使ってデプロイする方法</title>
      <link>https://noid11.github.io/posts/how-to-deploy-goapp-by-eb-cli/</link>
      <pubDate>Tue, 26 Jan 2021 02:40:20 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/how-to-deploy-goapp-by-eb-cli/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;ほぼほぼ&lt;a href=&#34;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/go-tutorial.html&#34;&gt;公式のチュートリアル&lt;/a&gt;をなぞっただけ&lt;/li&gt;
&lt;li&gt;良い点
&lt;ul&gt;
&lt;li&gt;とりあえず Go で Web アプリ作って動かしたいような場合に便利
&lt;ul&gt;
&lt;li&gt;ミドルウェアの事とか考えなくて良い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5分程度でインターネット経由でアクセス出来る環境にデプロイできる&lt;/li&gt;
&lt;li&gt;大体の場合、&lt;a href=&#34;https://aws.amazon.com/jp/free/&#34;&gt;12ヶ月間無料枠&lt;/a&gt;で済む
&lt;ul&gt;
&lt;li&gt;新しく始めるプロジェクトの PoC やプロトタイプを動かすようなシナリオに相性が良い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;やる気になれば&lt;a href=&#34;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-logs.html&#34;&gt;ログを確認&lt;/a&gt;したり、&lt;a href=&#34;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-ssh.html&#34;&gt;アプリケーションが動作する EC2 インスタンスに SSH 接続したり&lt;/a&gt;できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意点
&lt;ul&gt;
&lt;li&gt;HTTPS ではなく HTTP でのアクセスとなる&lt;/li&gt;
&lt;li&gt;デフォルトでは EC2 インスタンスロールを設定しないので AWS SDK を使いたい場合には工夫が必要
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eb create&lt;/code&gt; するときに &lt;code&gt;--instance_profile&lt;/code&gt; で指定しておくとか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;簡易的な設定で動作するため、複雑な要件が必要なプロダクション環境には向かないかも
&lt;ul&gt;
&lt;li&gt;ちゃんと設定内容を精査して調整した方が良い&lt;/li&gt;
&lt;li&gt;複雑な要件が必要なら EB CLI, EB ではない方法で管理した方が良いかもしれない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>go get コマンドのヘルプを読む</title>
      <link>https://noid11.github.io/posts/go-help-get/</link>
      <pubDate>Sat, 16 Jan 2021 12:10:06 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/go-help-get/</guid>
      <description>&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; コマンドのヘルプ &lt;code&gt;go help get&lt;/code&gt; を読んだメモ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UUIDv4 を Go で生成する</title>
      <link>https://noid11.github.io/posts/generate-uuidv4-by-golang/</link>
      <pubDate>Sat, 16 Jan 2021 11:31:50 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/generate-uuidv4-by-golang/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Playwright を golang から使う</title>
      <link>https://noid11.github.io/posts/hello-playwright-with-golang/</link>
      <pubDate>Tue, 12 Jan 2021 14:51:07 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/hello-playwright-with-golang/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://playwright.dev/&#34;&gt;playwright&lt;/a&gt; を Go で使える &lt;a href=&#34;https://github.com/mxschmitt/playwright-go&#34;&gt;playwright-go&lt;/a&gt; を動かしたメモ&lt;/li&gt;
&lt;li&gt;build したバイナリには Chromium などのエンジンは含まれず、バイナリ実行時にダウンロードが発生する
&lt;ul&gt;
&lt;li&gt;なのでクロスコンパイルして動かしても、バイナリを動かす環境にブラウザエンジンを動かす共有ライブラリが無い場合、ブラウザの起動に失敗してエラーとなる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>AWS Lambda で Go ランタイムを使うのが良いと思っている理由</title>
      <link>https://noid11.github.io/posts/aws-lambda-love-golang/</link>
      <pubDate>Fri, 01 Jan 2021 15:05:18 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/aws-lambda-love-golang/</guid>
      <description>&lt;p&gt;個人的に AWS Lambda では zip 形式で golang ランタイム使うのがコスパ最強な気がしているので、根拠をまとめておくメモ&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
