<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>noid11.github.io</title>
    <link>https://noid11.github.io/</link>
    <description>Recent content on noid11.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>&amp;#169; noid11</copyright>
    <lastBuildDate>Sat, 06 Feb 2021 15:12:57 +0900</lastBuildDate><atom:link href="https://noid11.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>bash, zsh で環境変数を使う方法</title>
      <link>https://noid11.github.io/posts/how-to-use-envrionment-variables-at-bash-and-zsh/</link>
      <pubDate>Sat, 06 Feb 2021 15:12:57 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/how-to-use-envrionment-variables-at-bash-and-zsh/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt; で設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;printenv&lt;/code&gt; で確認&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unset&lt;/code&gt; で削除
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export -n&lt;/code&gt; でも削除できるが、これは多分 bash でしか使えないので &lt;code&gt;unset&lt;/code&gt; 使ったほうが良い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コマンド例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MYVALUE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOGE&amp;#34;&lt;/span&gt;
printenv MYVALUE
&lt;span class=&#34;nb&#34;&gt;unset&lt;/span&gt; MYVALUE
printenv MYVALUE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;% &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MYVALUE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HOGE&amp;#34;&lt;/span&gt;
% printenv MYVALUE
HOGE
% &lt;span class=&#34;nb&#34;&gt;unset&lt;/span&gt; MYVALUE
% printenv MYVALUE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AWS 上に Proxy 環境を構築するメモ</title>
      <link>https://noid11.github.io/posts/how-to-build-proxy-env-on-aws/</link>
      <pubDate>Tue, 02 Feb 2021 22:07:44 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/how-to-build-proxy-env-on-aws/</guid>
      <description>これは何？ AWS 上に HTTP Proxy を構築して検証する機会があったので、構築手順をメモしておく 大まかな流れ [事前準備] VPC と public subnet, private subnet を用意しておく public subnet は Internet Gateway を</description>
    </item>
    
    <item>
      <title>AWS STS における GetCallerIdentity API に許可は必要ないという話</title>
      <link>https://noid11.github.io/posts/no-need-permission-sts-get-caller-identity/</link>
      <pubDate>Mon, 01 Feb 2021 21:47:26 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/no-need-permission-sts-get-caller-identity/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;AWS STS には GetCallerIdentity API という、使用しているクレデンシャルから AWS アカウントや IAM User, IAM Role 情報を取得する API がある&lt;/li&gt;
&lt;li&gt;この API は自分が想定した IAM User, IAM Role のクレデンシャルを取得できているのか確認するのに便利だが、使用する IAM Policy に sts:GetCallerIdentity アクションを Allow しなくても使用することが可能&lt;/li&gt;
&lt;li&gt;API Reference に書いてある&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Go で作成した Web アプリを EB CLI を使ってデプロイする方法</title>
      <link>https://noid11.github.io/posts/how-to-deploy-goapp-by-eb-cli/</link>
      <pubDate>Tue, 26 Jan 2021 02:40:20 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/how-to-deploy-goapp-by-eb-cli/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;ほぼほぼ&lt;a href=&#34;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/go-tutorial.html&#34;&gt;公式のチュートリアル&lt;/a&gt;をなぞっただけ&lt;/li&gt;
&lt;li&gt;良い点
&lt;ul&gt;
&lt;li&gt;とりあえず Go で Web アプリ作って動かしたいような場合に便利
&lt;ul&gt;
&lt;li&gt;ミドルウェアの事とか考えなくて良い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5分程度でインターネット経由でアクセス出来る環境にデプロイできる&lt;/li&gt;
&lt;li&gt;大体の場合、&lt;a href=&#34;https://aws.amazon.com/jp/free/&#34;&gt;12ヶ月間無料枠&lt;/a&gt;で済む
&lt;ul&gt;
&lt;li&gt;新しく始めるプロジェクトの PoC やプロトタイプを動かすようなシナリオに相性が良い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;やる気になれば&lt;a href=&#34;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-logs.html&#34;&gt;ログを確認&lt;/a&gt;したり、&lt;a href=&#34;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-ssh.html&#34;&gt;アプリケーションが動作する EC2 インスタンスに SSH 接続したり&lt;/a&gt;できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意点
&lt;ul&gt;
&lt;li&gt;HTTPS ではなく HTTP でのアクセスとなる&lt;/li&gt;
&lt;li&gt;デフォルトでは EC2 インスタンスロールを設定しないので AWS SDK を使いたい場合には工夫が必要
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eb create&lt;/code&gt; するときに &lt;code&gt;--instance_profile&lt;/code&gt; で指定しておくとか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;簡易的な設定で動作するため、複雑な要件が必要なプロダクション環境には向かないかも
&lt;ul&gt;
&lt;li&gt;ちゃんと設定内容を精査して調整した方が良い&lt;/li&gt;
&lt;li&gt;複雑な要件が必要なら EB CLI, EB ではない方法で管理した方が良いかもしれない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>EB CLI v3 のヘルプを読んだメモ</title>
      <link>https://noid11.github.io/posts/read-eb-cli-v3-help/</link>
      <pubDate>Tue, 26 Jan 2021 01:44:20 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/read-eb-cli-v3-help/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aws/aws-elastic-beanstalk-cli&#34;&gt;Elastic Beanstalk CLI v3&lt;/a&gt; の詳細なヘルプがネット上に無さそうだったので読んだメモ
&lt;ul&gt;
&lt;li&gt;基本的な使い方なら&lt;a href=&#34;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-getting-started.html&#34;&gt;ドキュメント&lt;/a&gt;がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;と思ったら &lt;a href=&#34;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-cmd-commands.html&#34;&gt;reference&lt;/a&gt; あった・・・&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>AWS CLI コマンドを利用可能な全てのリージョンに対して実行する方法</title>
      <link>https://noid11.github.io/posts/how-to-aws-cli-command-to-available-regions/</link>
      <pubDate>Mon, 25 Jan 2021 14:42:12 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/how-to-aws-cli-command-to-available-regions/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aws ec2 describe-regions&lt;/code&gt; と &lt;code&gt;jq&lt;/code&gt; によって利用可能な全てのリージョンを取得し、 &lt;code&gt;xargs&lt;/code&gt; コマンドで全てのリージョンに対して任意の AWS CLI コマンドを実行すれば OK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全リージョンに対して &lt;code&gt;ec2 describe-instances&lt;/code&gt; を実行する例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aws ec2 describe-regions &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq --raw-output &lt;span class=&#34;s2&#34;&gt;&amp;#34;.Regions[].RegionName&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -I&lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; -P &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; aws --region &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; ec2 describe-instances
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Apache Bench ノート</title>
      <link>https://noid11.github.io/posts/apache-bench-note/</link>
      <pubDate>Mon, 25 Jan 2021 01:01:38 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/apache-bench-note/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ab&lt;/code&gt;: Apache Bench について調べたノート&lt;/li&gt;
&lt;li&gt;基本形
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ab -c 10 -n 10 http://example.com/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;オプション
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-A&lt;/code&gt;: Basic 認証での user/password 指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: concurrency. 並行実行するコネクション数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-C&lt;/code&gt;: Cookie 指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-H&lt;/code&gt;: 任意の HTTP リクエストヘッダー指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-k&lt;/code&gt;: HTTP KeepAlive を有効化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;: HTTP Method を指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;: 生成する HTTP リクエスト数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: POST file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt;: タイムアウト設定。デフォルト 30 秒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;: ベンチマークのタイムリミット。デフォルトでは無制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-T&lt;/code&gt;: POST, PUT メソッドを使用する場合の Content-Type ヘッダー値。デフォルトでは text/plain だが application/x-www-form-urlencoded 等を指定できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;実行結果
&lt;ul&gt;
&lt;li&gt;1秒 あたりに行ったリクエスト数が知りたい: &lt;code&gt;Requests per second&lt;/code&gt; を確認&lt;/li&gt;
&lt;li&gt;失敗したリクエストを知りたい: &lt;code&gt;Non-2xx responses&lt;/code&gt; を確認&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Using Amazon SQS dead-letter queues to replay messages 読んだメモ</title>
      <link>https://noid11.github.io/posts/read-using-amazon-sqs-dead-letter-queues-to-replay-messages/</link>
      <pubDate>Sun, 24 Jan 2021 16:50:17 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/read-using-amazon-sqs-dead-letter-queues-to-replay-messages/</guid>
      <description>&lt;p&gt;以下のブログ記事を読んだメモ&lt;/p&gt;
&lt;p&gt;Using Amazon SQS dead-letter queues to replay messages | AWS Compute Blog&lt;br&gt;
&lt;a href=&#34;https://aws.amazon.com/jp/blogs/compute/using-amazon-sqs-dead-letter-queues-to-replay-messages/&#34;&gt;https://aws.amazon.com/jp/blogs/compute/using-amazon-sqs-dead-letter-queues-to-replay-messages/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQS の DLQ を扱う方法として、 DLQ を 2つ 使う構成&lt;/li&gt;
&lt;li&gt;1つめの DLQ は Lambda 関数のトリガーとして設定し、アプリケーションで処理されなかったメッセージを Lambda 関数によって再処理する
&lt;ul&gt;
&lt;li&gt;この Lambda 関数で処理できなかったものに関しては SQS メッセージ属性にて再試行回数をカウントして、所定のリトライ回数を超えたら 2つめ の DLQ にメッセージを送信し、あとは手動で処理する&lt;/li&gt;
&lt;li&gt;Lambda 関数による DLQ のリトライではメッセージ属性を使ってエクスポネンシャルバックオフによる間隔調整を行う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>AWS CLI v2 を使って CloudWatch Logs を `tail -f` っぽく見る方法</title>
      <link>https://noid11.github.io/posts/how-to-cloudwatch-logs-tail-follow-by-aws-cli-v2/</link>
      <pubDate>Sat, 23 Jan 2021 14:33:50 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/how-to-cloudwatch-logs-tail-follow-by-aws-cli-v2/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;AWS Lambda を動かしている時にマネジメントコンソールを開かなくてもログを確認できて便利&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;LOG_GROUP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/aws/lambda/myfunc
aws logs tail &lt;span class=&#34;nv&#34;&gt;$LOG_GROUP&lt;/span&gt; --follow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Mac に Docker Machine をインストールする方法</title>
      <link>https://noid11.github.io/posts/how-to-install-docker-machine-to-mac/</link>
      <pubDate>Fri, 22 Jan 2021 09:30:07 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/how-to-install-docker-machine-to-mac/</guid>
      <description>&lt;p&gt;ググっても公式情報がヒットしづらかったのでメモ&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
