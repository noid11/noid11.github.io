<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on tmp log</title>
    <link>https://noid11.github.io/posts/</link>
    <description>Recent content in Posts on tmp log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 14 Jan 2021 02:29:30 +0900</lastBuildDate><atom:link href="https://noid11.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Heroku CLI を使って Heroku Postgres をセットアップする方法</title>
      <link>https://noid11.github.io/posts/setup-heroku-postgres-by-heroku-cli/</link>
      <pubDate>Thu, 14 Jan 2021 02:29:30 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/setup-heroku-postgres-by-heroku-cli/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.heroku.com/postgres&#34;&gt;Heroku が提供するマネージドデータベースである Heroku Postgres&lt;/a&gt; を &lt;a href=&#34;https://devcenter.heroku.com/ja/articles/heroku-cli&#34;&gt;Heroku CLI&lt;/a&gt; からセットアップして接続するまでを試す手順&lt;/li&gt;
&lt;li&gt;Pros
&lt;ul&gt;
&lt;li&gt;PostgreSQL や SQL を学習したい時にサクッと使えて便利&lt;/li&gt;
&lt;li&gt;AWS Lambda 等ローカル環境の PostgreSQL が接続できない環境から、ちょっとしたデータベース接続を試したいような場合に便利
&lt;ul&gt;
&lt;li&gt;RDS よりも立ち上がりが速いし、無料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.heroku.com/pricing&#34;&gt;無料の Hobby Dev プラン&lt;/a&gt;だと、レコード数 10 K と同時接続数 20 といった制限があるので注意&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Playwright を golang から使う</title>
      <link>https://noid11.github.io/posts/hello-playwright-with-golang/</link>
      <pubDate>Tue, 12 Jan 2021 14:51:07 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/hello-playwright-with-golang/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://playwright.dev/&#34;&gt;playwright&lt;/a&gt; を Go で使える &lt;a href=&#34;https://github.com/mxschmitt/playwright-go&#34;&gt;playwright-go&lt;/a&gt; を動かしたメモ&lt;/li&gt;
&lt;li&gt;build したバイナリには Chromium などのエンジンは含まれず、バイナリ実行時にダウンロードが発生する
&lt;ul&gt;
&lt;li&gt;なのでクロスコンパイルして動かしても、バイナリを動かす環境にブラウザエンジンを動かす共有ライブラリが無い場合、ブラウザの起動に失敗してエラーとなる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Playwright を TypeScript で動かすまで</title>
      <link>https://noid11.github.io/posts/hello-playwright-with-typescript/</link>
      <pubDate>Tue, 12 Jan 2021 12:39:32 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/hello-playwright-with-typescript/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt; は Microsoft 製のブラウザ自動化ツール
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.chromium.org/&#34;&gt;Chromium&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/en-US/firefox/&#34;&gt;Firefox&lt;/a&gt;, &lt;a href=&#34;https://webkit.org/&#34;&gt;WebKit&lt;/a&gt; に対応している&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://playwright.dev/docs/docker/README/&#34;&gt;公式 Docker イメージ&lt;/a&gt;も提供されている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;組み込みで TypeScript をサポートしているとあったので、最低限動かす所まで試したメモ&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>セキュリティを学ぶことでトラブルシューティング能力が向上する・・・気がする</title>
      <link>https://noid11.github.io/posts/learning-security-will-improve-troubleshooting-skills/</link>
      <pubDate>Sat, 09 Jan 2021 12:31:00 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/learning-security-will-improve-troubleshooting-skills/</guid>
      <description>&lt;p&gt;ポエム。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>curl で外部 json ファイルを元に POST リクエストする方法</title>
      <link>https://noid11.github.io/posts/how-to-curl-with-json/</link>
      <pubDate>Thu, 07 Jan 2021 08:00:34 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/how-to-curl-with-json/</guid>
      <description>&lt;p&gt;&lt;code&gt;--data&lt;/code&gt;, &lt;code&gt;-d&lt;/code&gt; オプションで &lt;code&gt;@/file/to/path&lt;/code&gt; という感じで指定すれば良い。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cognito User Pool の CSV インポート機能</title>
      <link>https://noid11.github.io/posts/cognito-user-pool-csv-import-feature/</link>
      <pubDate>Tue, 05 Jan 2021 20:18:51 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/cognito-user-pool-csv-import-feature/</guid>
      <description>&lt;p&gt;Cognito User Pool における CSV インポート機能についてのメモ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS Lambda で Go ランタイムを使うのが良いと思っている理由</title>
      <link>https://noid11.github.io/posts/aws-lambda-love-golang/</link>
      <pubDate>Fri, 01 Jan 2021 15:05:18 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/aws-lambda-love-golang/</guid>
      <description>&lt;p&gt;個人的に AWS Lambda では zip 形式で golang ランタイム使うのがコスパ最強な気がしているので、根拠をまとめておくメモ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2021 年の目標</title>
      <link>https://noid11.github.io/posts/2021-goals/</link>
      <pubDate>Thu, 31 Dec 2020 22:49:26 +0900</pubDate>
      
      <guid>https://noid11.github.io/posts/2021-goals/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
